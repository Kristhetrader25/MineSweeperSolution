using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MineSweeperGUI
{
    /// <summary>
    /// Start screen that lets the player choose board size and bomb percentage,
    /// then launches the main Minesweeper form.
    /// </summary>
    public partial class StartGameForm : Form
    {
        /// <summary>
        /// Initializes the start form, wires default events, and prepares live labels.
        /// </summary>
        public StartGameForm()
        {
            InitializeComponent();

            // Initialize live labels when the form finishes loading.
            this.Load += StartGameForm_Load;

            // Hook up TrackBar scroll events (can also be done in the Designer).
            tbSize.Scroll += tbSize_Scroll;
            tbDifficulty.Scroll += tbDifficulty_Scroll;
        }

        /// <summary>
        /// Sets initial label text to reflect the current TrackBar values.
        /// </summary>
        private void StartGameForm_Load(object? sender, EventArgs e)
        {
            lblSizeValue.Text = tbSize.Value.ToString();
            lblDifficultyValue.Text = $"{tbDifficulty.Value}%";
        }

        /// <summary>
        /// Creates and shows the game form using the selected size and difficulty.
        /// Hides the start form while the game is running.
        /// </summary>
        private void btnPlay_Click(object sender, EventArgs e)
        {
            // Read size and convert percentage TrackBar to probability (0.00–1.00).
            int size = (int)tbSize.Value;
            float difficulty = tbDifficulty.Value / 100f;

            var gameForm = new Form1(size, difficulty);
            gameForm.Show();

            // Hide the start screen to keep focus on the game.
            this.Hide();
        }

        /// <summary>
        /// Updates the size readout whenever the size TrackBar moves.
        /// </summary>
        private void tbSize_Scroll(object sender, EventArgs e)
        {
            lblSizeValue.Text = tbSize.Value.ToString();
        }

        /// <summary>
        /// Updates the difficulty readout whenever the difficulty TrackBar moves.
        /// </summary>
        private void tbDifficulty_Scroll(object sender, EventArgs e)
        {
            lblDifficultyValue.Text = $"{tbDifficulty.Value}%";
        }

        /// <summary>
        /// Placeholder handler generated by the Designer (unused).
        /// </summary>
        private void trackBar2_Scroll(object sender, EventArgs e)
        {
            // Intentionally left blank.
        }
    }
}
